#Deployment crea ed esegue i containers e li mantiene in esecuzione
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-users
spec:
  selector:
    matchLabels:
      app: microservice-users
  replicas: 1
  template:
    metadata:
      labels:
        app: microservice-users
    spec:
      containers:
        - name: microservice-users
          image: ghcr.io/creative-hub-taass/microservice-users
          ports:
            - containerPort: 8080
          env: # Setting Environmental Variables
            - name: DB_HOST # Setting Database host address
              value: postgres
            - name: DB_NAME # Setting Database name
              value: creative-hub-users
            - name: DB_USERNAME # Setting Database username
              value: postgres
            - name: DB_PASSWORD # Setting Database password
              value: postgres
            - name: MAIL_HOST
              value: mail-server
            - name: MAIL_PORT
              value: mail-server
            - name: API_GATEWAY_URL
              value: localhost:30000
            - name: JWT_SECRET
              value: 7638792F423F4528472B4B6250655368566D597133743677397A24432646294A

---
#Servizio simile a un load balancer.
#Definizione del servizio che crea un pod del micro-servizio utente accessibile da fuori del cluster
apiVersion: v1
kind: Service
metadata:
  name: microservice-users
spec:
  selector:
    app: microservice-users #Seleziona i Pods da esporre collegandoli alle loro label
  ports:
    - port: 8080 # Port inside the cluster
      targetPort: 8080 #Il servizio ascolta per le richieste nella porta 8443 e direziona il traffico nella porta 8080 dei Pods target
      nodePort: 30001
  type: LoadBalancer #Il type NodePort espone i Pods accessibili anche all'esterno del cluster
